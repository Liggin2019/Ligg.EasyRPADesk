<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Email" xml:space="preserve">
    <value>Email地址格式不正确</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>文件名不正确，文件名只能由字母和数字、点、中划线组成</value>
  </data>
  <data name="PlusInteger" xml:space="preserve">
    <value>输入必须是正整数</value>
  </data>
  <data name="Mandatory" xml:space="preserve">
    <value>为必输</value>
    <comment>FieldIsRequired</comment>
  </data>
  <data name="NumeralRange" xml:space="preserve">
    <value>输入值应在{}到{}之间</value>
  </data>
  <data name="Numeral" xml:space="preserve">
    <value>输入必须是数字</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>密码格式不正确! 密码必须由字母、数字和特殊字符（如!,@,#,$,%,*)组成，且不小于7位。</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>应由字母、数字.或-组成</value>
  </data>
  <data name="StringLengthRange" xml:space="preserve">
    <value>字符数应在{0}-{1}之间</value>
  </data>
  <data name="StringMaxLength" xml:space="preserve">
    <value>输入不能超过{0}个字符</value>
  </data>
  <data name="StringMinLength" xml:space="preserve">
    <value>输入不能少于{0}个字符</value>
  </data>
  <data name="WebUrl" xml:space="preserve">
    <value>Web Url格式不正确</value>
  </data>
  <data name="Password1" xml:space="preserve">
    <value>密码格式不正确! 密码必须由字母、数字和特殊字符（如!,@,#,$,%,*)中的2者组成，且不小于7位。</value>
  </data>
  <data name="IncorrectInput" xml:space="preserve">
    <value>输入不正确</value>
  </data>
  <data name="PlusIntegerOrZero" xml:space="preserve">
    <value>输入必须是正整数或0</value>
  </data>
  <data name="Directory" xml:space="preserve">
    <value>目录路径不存在</value>
  </data>
  <data name="FilePath" xml:space="preserve">
    <value>文件不存在</value>
  </data>
  <data name="Ip" xml:space="preserve">
    <value>IP格式不正确</value>
  </data>
  <data name="IpOrMask" xml:space="preserve">
    <value>IP或掩码格式不正确</value>
  </data>
  <data name="Mask" xml:space="preserve">
    <value>掩码格式不正确</value>
  </data>
  <data name="Regex" xml:space="preserve">
    <value>与正则表达式不匹配</value>
  </data>
</root>