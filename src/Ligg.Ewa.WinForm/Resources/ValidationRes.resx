<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CanNotBeEarlierThan" xml:space="preserve">
    <value> Can't be earlier than '{0}'</value>
  </data>
  <data name="CanNotBeFutureTime" xml:space="preserve">
    <value> Can't be future time</value>
  </data>
  <data name="CanNotBeLaterThan" xml:space="preserve">
    <value> Can't be later than '{0}'</value>
  </data>
  <data name="CanNotBeNull" xml:space="preserve">
    <value> Can't be a null value</value>
  </data>
  <data name="CanNotBePastTime" xml:space="preserve">
    <value> Can't be past time</value>
  </data>
  <data name="CanNotBeZero" xml:space="preserve">
    <value> Can't be zero</value>
  </data>
  <data name="EmailFormat" xml:space="preserve">
    <value> Is incorrect  Email Format</value>
  </data>
  <data name="FileNameFormat" xml:space="preserve">
    <value> File name format isincorrect! File Name can only be composited by  alpha-numeric characters and - _.</value>
  </data>
  <data name="FileNameMustContainsSuffixSeperator" xml:space="preserve">
    <value> File name must contains suffix seperator .</value>
  </data>
  <data name="Integer" xml:space="preserve">
    <value> Input should be an integer</value>
  </data>
  <data name="NumberRange" xml:space="preserve">
    <value> Input value should be between {0} to {1}</value>
  </data>
  <data name="Numeral" xml:space="preserve">
    <value> Input should be numeral</value>
  </data>
  <data name="PasswordFormat" xml:space="preserve">
    <value> Password Format Is Incorrect! Password must be composited by following types: alpha, numeric characters and special characters（ !,@,#,$,%,* ,etc）, and can't be less than 7 chars</value>
  </data>
  <data name="PasswordConsistentence" xml:space="preserve">
    <value> Password is inconsistent</value>
  </data>
  <data name="Mandatory" xml:space="preserve">
    <value> Is mandatory</value>
  </data>
  <data name="StringForAlphaAndNumAndSpecificChar" xml:space="preserve">
    <value> Only alpha-numeric characters and Specific Character are allowed</value>
  </data>
  <data name="StringForAlphaOrNum" xml:space="preserve">
    <value> Only alpha or numeric characters are allowed</value>
  </data>
  <data name="StringForAlphaOrNumAndDotOrAt" xml:space="preserve">
    <value> Only alpha-numeric characters, . or @ are allowed</value>
  </data>
  <data name="StringLengthRange" xml:space="preserve">
    <value> Input chars should between {0}-{1}</value>
  </data>
  <data name="StringMaxLength" xml:space="preserve">
    <value> Input string can't exceed {0} chars</value>
  </data>
  <data name="StringMinLength" xml:space="preserve">
    <value> Input string can't be less than {0} chars</value>
  </data>
  <data name="ShouldBeBetween" xml:space="preserve">
    <value> Should Be Between  '{0}'  And '{1}'</value>
  </data>
  <data name="WebUrlFormat" xml:space="preserve">
    <value> Is Incorrect  Url Format</value>
  </data>
  <data name="PasswordFormat1" xml:space="preserve">
    <value> Password Format Is Incorrect! Password must be composited by  2 of following types: alpha, numeric characters and special characters（ !,@,#,$,%,* ,etc）, and can't be less than 7 chars</value>
  </data>
</root>